{"name":"Atomic Design Build System","tagline":"A Gulp based build system using Atomic Design, SemVer, AMD, Knockout Components, SASS, Swig","body":"# Atomic Design Build System\r\n\r\nA set of tools and helpers to make creating frontend using [Atomic Design](http://bradfrost.com/blog/post/atomic-web-design/) easier.\r\n\r\nAtoms, molecules, organisms, templates and pages all go in their respective directories (f.ex. `./source/atoms/link.html`).\r\n\r\n## Templating\r\nTemplating is done using [Swig](http://paularmstrong.github.io/swig/).\r\n\r\nThere are custom tags for Atomic Design concepts:\r\n\r\nAtom: `{% atom \"link\" %}`\r\n\r\nMolecule: `{% molecule \"link-list\" %}`\r\n\r\nOrganism: `{% organism \"header\" %}`\r\n\r\nTemplate: `{% template \"article\" %}`\r\n\r\nThese are all variations of the Swig `include` tag and support the same things it does.\r\n\r\n### Pages and Data\r\nIn Atomic Design, a page is an instance of a template with some data.\r\n\r\nA JSON file in `./source/data/` with the same name as an HTML file in `./source/pages/` is passed to the page during the build process.\r\n\r\n## Styles (SCSS)\r\nJust add your SCSS files to the appropriate directory (atoms, molecules etc.) and the build process will take care of finding them and including them in the SASS build.\r\n\r\nThis is done through globbing in `./source/global/app.scss`. SASS does not support globbing natively, so this is added using `gulp-css-globbing`.\r\n\r\n## JavaScript Components\r\nThe applications JavaScript is componentized using AMD. Components can be included in any Atomic Design directory, but must be registered as a dependency in `./source/global/app.js` to be included in the build.\r\n\r\n### Knockout Components\r\nEach component is a [Knockout](http://knockoutjs.com) [Component](http://knockoutjs.com/documentation/component-overview.html).\r\n\r\nExample:\r\n\r\n```\r\ndefine(['ko', 'text!./atom.tmpl.html'], function(ko, tmpl){\r\n    function Atom(){\r\n        var self = this;\r\n\r\n        self.text = ko.observable('atom');\r\n    }\r\n\r\n    return {\r\n        viewModel: Atom,\r\n        template: tmpl\r\n    };\r\n});\r\n```\r\n\r\n### Knockout Templates\r\nTemplates are by convention placed in the same directory as the component with the name `{component}.tmpl.html`.\r\n\r\nExample:\r\n\r\n```\r\n<div class=\"atom\">\r\n    <input type=\"text\" data-bind=\"textInput: text\" />\r\n    <span data-bind=\"text: text\"></span>\r\n</div>\r\n```\r\n\r\n### Registering\r\nRegistering a component is done as follows:\r\n\r\n```\r\nrequire(['ko', 'atoms/atom'], function(ko){\r\n    ko.components.register('atom', {\r\n        require: 'atoms/atom'\r\n    });\r\n\r\n    ko.applyBindings();\r\n});\r\n```\r\n\r\n## Building\r\nRun `npm install` to get the dependencies.\r\nRun `gulp` to build.\r\n\r\n## Automatic Build While Developing\r\nRun `gulp dev` and watchers will be set up for building HTML, CSS and JS when relevant files change.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}